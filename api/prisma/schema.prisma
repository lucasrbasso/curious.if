datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(uuid())
  published Boolean @default(false)
  content   String
  to        String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes         Like[]
  numberOfLikes Int    @default(0)

  comments      Comment[]
  commentLike   CommentLike[]
  commentReport CommentReport[]


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

}

model User {
  id          String   @id @default(uuid())
  email       String   @unique()
  password    String
  name        String
  isValidated Boolean  @default(false)
  permissions String[]
  roles       String[]

  posts         Post[]
  likes         Like[]
  comments      Comment[]
  commentLike   CommentLike[]
  commentReport CommentReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

}

model Like {
  id String @id @default(uuid())

  author User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid())

  content       String
  commentReport CommentReport[]
  commentLike   CommentLike[]
  numberOfLikes Int             @default(0)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CommentLike {
  id String @id @default(uuid())

  author User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CommentReport {
  id String @id @default(uuid())

  content String?

  author User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
